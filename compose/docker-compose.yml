services:
  agent:
    image: ghcr.io/tidybee/tidybee-agent:main
    ports:
      - "8111:8111"
    environment:
      - TIDY_ENV=docker
    depends_on:
      - hub-tidy-events
    volumes:
      - ./test_folder:/app/tests/assets/test_folder
  hub-api-gateway:
    image: ghcr.io/tidybee/tidybee-hub-api-gateway:main
    ports:
      - "7001:80"
    depends_on:
      - hub-auth
      - hub-data-processing
      - hub-postgres
      - hub-tidy-events
  hub-auth:
    image: ghcr.io/tidybee/tidybee-hub-auth:main
    ports:
      - "7002:80"
    volumes:
      - ./database:/app/Database
  hub-data-processing:
    image: ghcr.io/tidybee/tidybee-hub-data-processing:main
    ports:
      - "7003:80"
    depends_on:
      hub-postgres:
        condition: service_healthy
    restart: on-failure
  hub-tidy-events:
    image: ghcr.io/tidybee/tidybee-hub-events:main
    ports:
      - "5057:8080"
    depends_on:
      hub-postgres:
        condition: service_healthy
    restart: on-failure
  hub-postgres:
    extends:
      file: hub-postgres.yml
      service: hub-postgres
  frontend:
    image: ghcr.io/tidybee/tidybee-frontend:main
    ports:
      - "8080:80"
    depends_on:
      - grpc-web-proxy
  
  grpc-web-proxy:
    build:
      context: ./grpc-web-proxy  # Path to the directory containing the Dockerfile
    container_name: grpc-web-proxy
    command:
      - --backend_addr=hub-tidy-events:5057  # Point to your gRPC backend
      - --run_tls_server=false
      - --allow_all_origins
      - --server_http_debug_port=8081
    ports:
      - "8081:8081"  # Exposing the gRPC-Web proxy on port 8081
    depends_on:
      - hub-tidy-events

volumes:
  pg_data:
